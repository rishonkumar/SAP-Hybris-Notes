Data Modeling | Product Modeling | Dynamic Attributes |Impex |Use Case Activity 
	https://www.youtube.com/watch?v=O_DNcbU17l4

Type System SAP Hybris
	https://www.youtube.com/watch?v=wwQP99Q8vEM&list=PLp1aGN8kFsXJOObAapeUG58vQnMnCgDMw&index=5

Impex Tutorial SAP Hybris
	https://www.youtube.com/watch?v=nQLtkGA2MlI&list=PLp1aGN8kFsXJOObAapeUG58vQnMnCgDMw&index=7

Flexible Search Tutorial SAP Hybris

	https://www.youtube.com/watch?v=jR57JIkx3vk&list=PLp1aGN8kFsXJOObAapeUG58vQnMnCgDMw&index=8


Data Validation Framework	


	https://help.sap.com/docs/SAP_COMMERCE/d0224eca81e249cb821f2cdf45a82ace/8ba7f5a9866910148b749e7217fa45fa.html



SAP Hybris Solr / Hybris Solr Indexing / Searching
	https://www.youtube.com/watch?v=sf4cepBrlHU&t=2430s



NOTE IF itemtype = XXX then during the build (ant clean all), there will be model class created = XXXModel.java




Typecode should be given above 10000+ cox its laready reserved by hybris




	The basic search and Product Cockpit get the data from Solr Doc


To move DB to Solr Doc 
		System => Facet => Facet Search Config => Solr Confir for backoffice => Click Index



Data modelling {PIM} Type System


SAp commerce by default provides lot of tables

Example 
	Cart Order User Product Category


To see those tables => *.items.xnl (core-items => Product User,cms2-items => CMS realted tables/types)



How to create table/type , create cols, create realtions, manage DB => ANS IS DATA MODELLING

Model Classes /  Object  	

	Are generated during the build[ant clean all]

	Q = based on what
		Type defined in -items.xml

		If itemtype name = Abc then generated model class name = AbcModel.java

		User UserModel, Cart CartModel



	Q = What Model class contains

		Attriburtes are columns,
		Qualifiers are columns name

		for every attribute will be 1 variable 1 set method 1 get mothod


	Q = 	What happens if attirbute is String and localized String

			In DB => localized u can add any language english,french 
			In only String u can enter only 1 value

			IF attribue is locailzed 1 var 2 set and get methods

	type = "boolean" vs "java.lang.boolean"

			boolean 
				variable, set(), isRequired()

				IN DB => True, False

			java.lang.boolean
				  Unique, setUnique, getUnique, 

				  In DB => True, False, N/A


	SO USING MODAL CLASSES WE CAN SET , GET THE DATA


	PURPOSE OF MODAL CLASS => WE can perform DB operations (create,get,uopdate,delete) 


	REQUIRMENT => I want to create custome


				USING CODE (Model file)


				set 1
					CustomeModel cm = new CustomerModel();
								or

					CustomerModel cm = modelService.create(CustomerModel.class); (Recommnded)


				step 2
					Enter the data
					cm.setId("Rishon")
					cm.setName("ABC")
					cm.setDesc("Testing")

				step 3 Perform DB Operations

						modelService.save(cm);


			TEMPLATE

				S1 => Create Obj
					YYYModel ob = modelService.create(YYYModel.class)

				S2 => Set the Data
                    ob.setCol1("abc")
                    ob.setCol2("RRS)

                S3 => Perform Db Operations
                    modelService.save(ob)

    
    Scenarios

        We want to create Emp[type/table] with 3 cols

        S1 => *=items.xml 
            Write the code / design
              
              <itemtype code = "Emps">
                <deployment table = "Emp" typecode="4 ....>
                <attibute qualifiers = "EmpID..>
                <attibute qualifiers = "EmpName..>
                <attibute qualifiers = "EmpSal..>
              </itemtype>

        S2 => do the build
                Model file will be generated "XXX then during the build (ant clean all), there will be model class created = XXXModel.java"

        S3 => go to hac => perform the update
            It will be converted into table

        deployment table => DB purpose

        if u want to create cols/attribute in own table then go with the deployment tag

        If u dont use deployment tag then col or attribute are created current itemtype parent deployment

        in attribute tag    
            if persistence type = "Property" -- creted in DB
            if persistence type = "Dynamic" -- not creted in DB => this nly for Sap commerce Cals


        typecode 
         <deployment table = "Emp" typecode="4 ....>
            Range is 0 - 32767
            Unqiue number given to tables

            < 10K number SAP will use
            > 10K you can use   
                Whenever u r creating a table
                    Use the typecode after 10k

            

IMPEX => FSQ

    Insert , delete, Update the record => IMPEX

    TO get the record => Flexible search Query

    Flexible => SAP commerce

    SQL => DB Query


    SAP E-commerce is DB Independent 


             
					


Scenarios
    IN sap System
        Material Plant [Table]

    Req => Asked to create same in SAP commerce
    & complete with code .. name .. desc
    === client started entering the data
    after 20 days Client -> Asked to add 2 more cols => valueCenter,  profitCenter


    ANS 
        We code in items.xml
        Then build
        After update
        It got created

        Default is 255 char now client asked only 10 char max so u coded it

        <columtype database = "orcale"> <value>VARCHAR(10) </value>
        <columtype database = "mysql"> <value>VARCHAR(20) </value>

        Once again build

        But there is no expected in the table WHY ??
            Decreasing the size is not possible

        Solutions 
            1) INIT [but prob is all the data will lost]
            2) Export data. Drop those cols "hac- update"
            3) Limitations 
                When client enter Put the Validations

    IN SAP WE DO DATABASE DESIGN IN *.items.xml 

        If u want to change dp from orcale to mysql then just confiugure the DB 
        config/local.properties
        if mysql specify driver then copy it
        start the server and perform INIT/Update

    How to move the data    
        SOL 1 : export import in DB
        SOL 2 : Impex in SAP COMM

    MODIFIERS
        Whenever we create attibute/col => then we can specify the modifier
        <modifier read = "true" write = "false" search = "true" optional = "true" initial = "true" />

        Select * from order where code = 123

    WHERE TO DO DATA MODELLING
        Data modelling we do inside trainingcore => resources

    Syntax for data modelling
         We need 6 tags

         ACE MRI [TYPE System] Order is important

         Atomic
         Collection
         Enum
         Map
         Relation
         itemtype

    ATOMIC TYPES

        20 -20 int long
        float double
        String
        boolean

    Collection Type

        How to find how many order are placed by each User  
            Select User.UserID, Count(Order.OrderID) from User,Order where User.UserId = Order.UserID group by Order.UserID

        Performance Issue

        Soln -> Use collection

        List , Set => Collection

        Collection => 1- M Relation

        If u Know the approx data size == Collection
            Retrive of data is fast

        If u dont know data == Relation
            We can have more data

    ENUM

        There is possiblilty that u can have small capital combination 
            If u have fixed value for your DB - Col then go with ENUM

    Order   
        OrderNo CardType[ENUM] Status[ENUM]

    Map
        Use to store K-V pairs
        Keys are Unique . vals can be duplicate

    
    Relation    
        1-1 1-M M-N

        User order 1-M
        User Cart 1-M

        to define the realtions
            Source[Left-type] Target[Right-Type] == cardinality


            1-1 Relation HHow many min tables req => 1
            1-M Relation HHow many min tables req => 2
            M-M Relation HHow many min tables req => 3 , coz we need one more table to store
                    So we will add deployment tag 

    ITEM TYPE => HEART OF TYPE SYSTEM

        <itemtype code = "Product"
                  extends = "GenericItem"
                  autocreate = "true"
                  generate = "true"

                  >

            autocreate true => will be created in DB
                        false => u telling sap commerce that type already exisiting & contiune to update

            generate => for model files





































SAP Hybris Extension:
An extension is an encapsulated piece of the hybris e-Commerce Suite that can contain business logic, type definitions, a web application, or a hybris Management Console (hMC) configuration. That way, you link up in one place all of the functionality that covers a certain field of use.

SAP Hybris AddOn:
The purpose of an AddOn is to wrap an extension. By wrapping an extension, it provides additional features to an extension without needing to modify the code of the extension. An AddOn extends the Commerce Accelerator without touching its codebase. Technically, an AddOn is an extension but at build time its codebase is copied inside target extensions to become a part of the extension itself.






IMPEX

    text based import export functionality provided by SAP HYBRIS which is in format of a CSV
    Allows user to CRUD platform items like Product,Customer,Delivery Modes etc

    bin->platform->ext->impex

Where is Impex Used
    Importing any data
    Creating Backups

Need of impex import
    to insert data like product,promotions,prices,stories

    these data needs to inserted in hybris to display on site

    to sync data with other System such as ERP

    data can be inserted at run time/initi/update

Need of export
    to migrate data from one hybris installation to another
    to create Backups

Operations => INSERT,UPDATE,REMOVE,EXPORT

Structure of impex => HEADER,VALUE LINES,MACROS,COMMENT

    HEADER SYNTAX
    
    Operation itemtype;attibute(refAttr)[modifier]

    INSERT Product;code[Unique=true]
    UPDATE Product;code[Unique=true];name[lang=en]
    INSERT_UPDATE Customer;CustomerId[Unique=true];group(uid)
    REMOVE Product;code[Unique=true]

    Insert unit;code[Unique=true];conversion;unittype
    ;pieces;1.0;pieces

    Update unit;code[Unique=true];conversion;unittype
    ;grams;100;grams

    Remove unit;code[Unique=true]
    ;grams

    MACROS => Whenever we are using most common word take it as a variable

    COMMENT = #

    
Important syntax:
"#% impex.exportItemsFlexibleSearch(""select {PK} from {Product} where {code}='45572'"", Collections.EMPTY_MAP, Collections.singletonList( Item.class ), true, true, -1, -1  );"



    











Flexible Search 
    SQL like Syntax
    Return list of object(Hybris items)


    Syntax
        Select<SELECTS>FROM{TYPES}(WHERE<CONDITIONS>)(ORDERBY<ORDER>)

    ASC,DESC,DISTINCT,AND,OR,LIKE,JOIN,CONCAT


Select * from {product}

select {code} from {product}

select {code} from {product!}

select {code}, {name[en]} From {product}

select {code}, {name[en]}, {name[de]} From {product} where {name[en]} like '%cap%'
//cap at end
select {code}, {name[en]} From {product} where {name[en]} like '%cap'
select {code}, {name[en]} From {product} where lower{{name[en]}} like '%cap'

select {code}, {name[en]} From {product} where {creationTime} > to_date('2020-12-12 03600), ("Y-M-D-S")

select {code}, {name[en]} From {product} where {creationTime} > to_date('2020-12-12 03600), ("Y-M-D-S") order by {code} DESC


select {code}, {name[en]} From {product} where {name[en]} NOT LIKE "%men"

select count(*) from {product}

select {code}, {name[en]} From {product} where {code} LIKE "300%" AND {name[en]} like "%cap"






















        

    

        



            